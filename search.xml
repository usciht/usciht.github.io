<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mysql 5.7 在Ubuntu上的安装</title>
    <url>/2019/11/02/a10-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为刚接触MySQL和LInux的新手准备的一份安装教程<br>MySQL在Linux上安装方式是多种多样的，docker，binary tar, from the Ubuntu repositories, from the Ubuntu repositories or official repository，甚至你可以自己从源代码编译一份都是没有问题的。这里为刚入门的新手准备了一份简单易行的安装方式。</p>
<a id="more"></a>

<h1 id="安装mysql-Ubuntu"><a href="#安装mysql-Ubuntu" class="headerlink" title="安装mysql-Ubuntu"></a>安装mysql-Ubuntu</h1><h2 id="1-安装-mysql"><a href="#1-安装-mysql" class="headerlink" title="1. 安装 mysql"></a>1. 安装 mysql</h2><p>在Ubuntu 18.04上，默认情况下，只有最新版本的 MySQL 包含在APT软件包存储库中。目前来说是MySQL 5.7。<br>首先在安装之前需要更新服务器上的软件包索引然后才能使用apt安装默认软件包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install mysql-server</span><br></pre></td></tr></table></figure>

<p>接下来便会开始安装MySQL，但这里不会提示设置密码或进行任何其他配置更改。（这里与我在ubuntu 16.04上安装不一样。从网上查阅资料得知：因为这会使MySQL的安装不安全，目前已经使用在安装后执行安全设置来代替这一点）</p>
<h2 id="2-配置MySQL"><a href="#2-配置MySQL" class="headerlink" title="2.配置MySQL"></a>2.配置MySQL</h2><p>对于全新的安装模式，需要首先运行附带的安全脚本，这样才能进行接下来的数据库访问。 这改变了一些不太安全的默认选项，例如远程root登录和示例用户。 在旧版本的MySQL中，是需要手动初始化数据目录，但现在会自动完成。</p>
<p>运行安全脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p>接下来将会通过一系列提示来对MySQL安装的安全选项进行一些更改（这一步非常重要）</p>
<h3 id="验证mysql安装"><a href="#验证mysql安装" class="headerlink" title="验证mysql安装"></a>验证mysql安装</h3><p>首先可以通过以下命令来查看mysql的运行状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ systemctl status mysql.service</span><br></pre></td></tr></table></figure>

<h3 id="更改-设置root账户的密码"><a href="#更改-设置root账户的密码" class="headerlink" title="更改/设置root账户的密码"></a>更改/设置root账户的密码</h3><blockquote>
<p>摘自MySQL官方文档<br>For MySQL 5.7.16 on Ubuntu 16.04, the default authentication plugin for user <code>root</code> (empty host) is <code>auth_socket</code>. This basically means you cannot set a password for that user, and root is <strong>always</strong> allowed to log in if it uses the socket (i.e. <code>localhost</code> as the host to connect to). This should be reasonable secure since only root can access that socket and if your root account is compromised, you’re already dead in the water. If you want to set a password for the root account anyway, you can change the plugin to <code>mysql_native_password</code>: </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update user set plugin=&apos;mysql_native_password&apos; where user=&apos;root&apos; and host=&apos;localhost&apos;;</span><br></pre></td></tr></table></figure>

<p>and then change the root password.</p>
<h2 id="设置远程连接"><a href="#设置远程连接" class="headerlink" title="设置远程连接"></a>设置远程连接</h2><p>需要设置 mysql 数据库支持外部或者远程访问，则需要把绑定 IP 地址改为 0.0.0.0，或者不写IP地址。因此编辑配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>修改绑定地址为 0.0.0.0。原来默认绑定 127.0.0.1 注释掉。修改完 mysqld.cnf 文件有最好重新启动服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind-address = 0.0.0.0</span><br><span class="line"># bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>另外需要进入 MySQL 程序修改 root 账户的远程访问的权限。如果这一步不执行，则远程用 Navicat 访问时，会报 1130 错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>进入 MySQL 以后输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;123456&apos; with grant option;</span><br><span class="line">grant all privileges on *.* to &apos;test&apos;@&apos;%&apos; identified by &apos;passwordtest&apos; with grant option;</span><br><span class="line">#其中，root表示数据路用户名，123456表示远程登陆的密码</span><br></pre></td></tr></table></figure>

<p>刷新刚才修改的权限，使其生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySql类</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>request对象</title>
    <url>/2019/11/01/a11-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JSP中数据到底传入哪了？如何得到用户的数据？以及request对象的基础使用方法。</p>
<a id="more"></a>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol>
<li><h3 id="基本的网页响应形式"><a href="#基本的网页响应形式" class="headerlink" title="基本的网页响应形式"></a>基本的网页响应形式</h3></li>
</ol>
<blockquote>
<p>用户端界面发送请求–&gt;响应端界面</p>
</blockquote>
<ol start="2">
<li><h3 id="request应用实例"><a href="#request应用实例" class="headerlink" title="request应用实例"></a>request应用实例</h3></li>
</ol>
<ul>
<li><p>首先新建一个文件名为login.jsp文件，源码如下</p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@pagecontentType</span>=<span class="string">"text/html;charset=UTF-8"</span>language=<span class="string">"java"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;getRequest.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">"text-align:center"</span>&gt;</span><br><span class="line">&lt;form action=<span class="string">"响应的界面名称"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">&lt;!--最常见的响应方式有两种,post和<span class="number">2</span>.get 一般为post，post的适合传输量较大的数据，比较隐蔽，get方式传输数据直接显示到url界面--&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;用户名称&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input name="usename"type="text"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;用户密码&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input name="password"type="password"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="submit"value="登录"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如上文中的<code>&lt;input&gt;</code>属性中的name就是响应端能够得到的数据的名称，type则为该数据的数据类型（如：设置为”password”，用户密码输入时的内容将用”*”代替显示）其中我们把用户输入的数据放入<form>标签中，这样当用户点击type为submit按钮界面就会跳转到响应的页面中。</form></p>
<br>
<br></li>
<li><p>如图所示</p>
<blockquote>
<p><img src="/2019/11/01/a11-md/example.png" alt></p>
</blockquote>
</li>
</ul>
<ol start="3">
<li><h3 id="取得用户输入的数据"><a href="#取得用户输入的数据" class="headerlink" title="取得用户输入的数据"></a>取得用户输入的数据</h3></li>
</ol>
<ul>
<li><p>首先新建一个名为”getInfo.jsp”JSP文件,源码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@pagecontentType</span>=<span class="string">"text/html;charset=UTF-8"</span>language=<span class="string">"java"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;getInfo.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String name=request.getParameter(<span class="string">"usename"</span>);</span><br><span class="line">String password=request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样用户的输入数据就保存在name和password中了，你就可以利用用户给出的数据执行一些操作。</p>
</li>
<li><p>关于数据的存储还有创建对象的方式，详细会在下次内容中讲解。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>WEB类</category>
      </categories>
      <tags>
        <tag>JSP</tag>
        <tag>request对象</tag>
      </tags>
  </entry>
  <entry>
    <title>博客md书写规范</title>
    <url>/2019/11/01/a9-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了规范博客md的书写规范，简化工作流程，特写此章。<br><br><font color="red"><strong>请博客提交者尽量按照此章规定进行书写</strong></font></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="文章标准设置"><a href="#文章标准设置" class="headerlink" title="文章标准设置"></a>文章标准设置</h3><p>下面内容是文章的属性设置，不会在文章页面显示，但是很重要，将其加入到md文件的最前方即可。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 2019-11-1 11:11:06</span><br><span class="line">author: 作者</span><br><span class="line">categories: 大分类</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">    - </span>标签1</span><br><span class="line"><span class="bullet">    - </span>标签2</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>关于文章的标签和分类问题，若是博客页面上已经有了标签，直接引用就好。若是没有，请联系博客项目组</p>
<h3 id="文章内容标准"><a href="#文章内容标准" class="headerlink" title="文章内容标准"></a>文章内容标准</h3><p>下面是文章的形式设置.</p>
<ul>
<li>首先是前言，前言部分为作者对内容的总结，或者是提出问题的原因，或者遇到的问题形式。总之，告诉别人你这篇文章是针对什么的。</li>
<li>关于内容部分，小标题用###表示 ，样式如下<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">## 前言</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br><span class="line"><span class="section">## 内容</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 小标题1</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 小标题2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="完整md样式"><a href="#完整md样式" class="headerlink" title="完整md样式"></a>完整md样式</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 2019-11-1 11:11:06</span><br><span class="line">author: 作者</span><br><span class="line">categories: 大分类</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">    - </span>标签1</span><br><span class="line"><span class="bullet">    - </span>标签2</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 前言</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br><span class="line"><span class="section">## 内容</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 小标题1</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 小标题2</span></span><br></pre></td></tr></table></figure>

<p>-</p>
]]></content>
      <categories>
        <category>团队项目类</category>
      </categories>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>Java行为参数化</title>
    <url>/2019/11/01/a8-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在软件工程中我们总是会遇到用户需求改变的问题，加入你要做一个农户的库存查询系统，今天农户跑过来问你能不能做一个查询绿苹果的数量的功能，于是你很轻松的就完成了，明年农户跑过来问你做一个查询苹果重量的功能…，于是你Copy了上次的代码，改变一下条件，很轻松的就完成了。</p>
<a id="more"></a>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p><br>这样一天天的农户的需求一直在改变，而你的代码要每次重复增加，一旦要修改其中的一段，那么工程量是巨大的，这毫无疑问不是一个好的解决方法。那么我们这时候就可以将行为参数化。</p>
<blockquote>
<p>下文中的实例都是假设在Apple对象有getColor和getWeight的前提下进行</p>
<ol>
<li>这时我们需要根据Apple的某些属性来返回一个boolean值。我们让它成为一个谓词。显然我们定义一个接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplePredicate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">现在就可以用ApplePredicate的多个实现代表不同的选择标准了,比如</span><br><span class="line"></span><br><span class="line"><span class="comment">//仅仅选出重的苹果</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleHeavyWeightPredicate</span> <span class="keyword">implements</span> <span class="title">AplePredicate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apple.getWeight()&gt;<span class="number">150</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//仅仅选出绿色的苹果</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleGreenColorPredicate</span> <span class="keyword">implements</span> <span class="title">AplePredicate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"green"</span>.equals(apple.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<ol start="2">
<li><p>在这里，你的代码现在足够灵活，可以应对任何涉及苹果属性的需求变更了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleRedAndHeavyPredicate</span> <span class="keyword">implements</span> <span class="title">ApplePredicate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"red"</span>.equals(apple.getColor())</span><br><span class="line">        &amp;&amp; apple.getWeight()&gt;<span class="number">150</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Apple&gt; redAndHeavyApples = filter(inventory ,<span class="keyword">new</span> AppleRedAndHeavyPredicate());</span><br></pre></td></tr></table></figure>

<p>现在filter方法的行为取决于你通过ApplePredicate对象传递的代码，换句话说，你把filt方法的行为参数化了！</p>
<h3 id="前文所述都是为Java-8-特性之Lambda表达式做铺垫"><a href="#前文所述都是为Java-8-特性之Lambda表达式做铺垫" class="headerlink" title="前文所述都是为Java 8 特性之Lambda表达式做铺垫"></a>前文所述都是为Java 8 特性之Lambda表达式做铺垫</h3></li>
<li><p>Lambda表达式的灵活运用</p>
<blockquote>
<p>相信大家在学习JAVA基础课程的时候都会学习Lambda表达式，很多同学也是云里雾里（我就是其中之一），仔细阅读下文，相信你一定会有所收获</p>
<br>
在前文
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Apple&gt; redAndHeavyApples = filter(inventory ,<span class="keyword">new</span> AppleRedAndHeavyPredicate());</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这样的代码看起来让人比较费解<br>然而在Java 8里可以用Lambda表达式重写为下面的样子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Apple&gt; redAndHeavyApples = filter(inventory ,(Apple apple)-&gt;<span class="string">"red"</span>.equals(apple.getColor()));</span><br></pre></td></tr></table></figure>

<p>不得不承认这段代码比之前的干净很多，这很好，<font color="red"><strong>因为它看起来更像问题陈述本身了</strong></font></p>
<p>在上文中我们就说过，如果农户要选择一个又红又中的苹果，需要进行排序操作，我们可以为这个对象写两个比较函数，简单一点的是利用匿名内部类实现功能，更简单的就是行为参数化。<br><br></p>
<h2 id="那么，还有其他的方法吗？"><a href="#那么，还有其他的方法吗？" class="headerlink" title="那么，还有其他的方法吗？"></a><font color="red">那么，还有其他的方法吗？</font></h2><p>在JAVA中我们还有一个叫做比较器链，如果你在排序中发现两个苹果一样重怎么办？哪个苹果应该排在前面呢？我们这时定义两个方法，sort1()用来选择排序红的苹果，sort()2用来选择排序重的苹果，此时我们的方法就显得繁琐。因此，比较器链和为此复合就出来了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inventory.sort(comparing(Apple::getWeight)</span><br><span class="line">                .thenComparing(Apple::getColor));//当两个苹果一样重的时候进一步按照颜色排序</span><br></pre></td></tr></table></figure>

<p>谓词接口包括三个方法</p>
<ol>
<li>negate</li>
<li>and</li>
<li>or<blockquote>
<p>比如 redApple.negate();<br>该函数的意思就是红苹果的非，即不是红苹果<br>谓词接口示范代码：</p>
<pre><code>Predicate &lt;Apple&gt; redAndHeavyAppleOrGreen = 
 redApple.and(a-&gt;a.getWeight()&gt;150)
         .or(a-&gt;&quot;green&quot;.equals(a.getColor()));</code></pre></blockquote>
<h3 id="请注意，谓词接口的优先级为从左到右，如："><a href="#请注意，谓词接口的优先级为从左到右，如：" class="headerlink" title="请注意，谓词接口的优先级为从左到右，如："></a>请注意，谓词接口的优先级为从左到右，如：</h3><blockquote>
<p>a.or(b).and(c) 可以看作 (a||b)&amp;&amp;c</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Java相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题系列之五花八门的输入</title>
    <url>/2019/10/20/a6-md/</url>
    <content><![CDATA[<!--### <center>作者：小朋友</center>-->
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷过题目的人肯定都知道，输入格式的苦，肯定被坑过不少，我没错啊！我明明都做对了为啥就不给我过呢！一声声灵魂拷问，于是这篇文章就问世了…..</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>要想解决，很简单，其实输入大致就分为以下几种，我来为你们一一列举（以简单的A+B为例）：</p>
<ul>
<li><p>首先是最简单的一种：<strong>单组数据输入</strong>(以C++语言为例)：</p>
<blockquote>
<p>#include&lt; iostream &gt;<br> using namespace std;<br> int main()<br> {</p>
<pre><code>int a,b;
 cin&gt;&gt;a&gt;&gt;b;
 cout&lt;&lt;a+b;
 return 0;</code></pre><p> }</p>
</blockquote>
</li>
</ul>
<h5 id="然后是多组数据输入，多组数据输入又细分为两种：确定组数的多组输入和不定组数的多组输入"><a href="#然后是多组数据输入，多组数据输入又细分为两种：确定组数的多组输入和不定组数的多组输入" class="headerlink" title="然后是多组数据输入，多组数据输入又细分为两种：确定组数的多组输入和不定组数的多组输入"></a>然后是多组数据输入，多组数据输入又细分为两种：确定组数的多组输入和不定组数的多组输入</h5><ul>
<li><p><strong>确定组数</strong>的多组输入：(C与C++类似，故不再一一给出)</p>
<blockquote>
<p>#include&lt; iostream &gt;<br> using namespace std;<br> int main()<br> {</p>
<pre><code>int T,a,b;
cin&gt;&gt; T;
while(T--)//实现T组数据的输入
{
    cin&gt;&gt;a&gt;&gt;b;
    cout&lt;&lt;a+b;
}
return 0;</code></pre><p> }</p>
</blockquote>
</li>
<li><p><strong>不定组数</strong>的多组输入：<br>C系列：</p>
<blockquote>
<p>#include &lt; stdio.h &gt;<br>  int main()<br>  {</p>
<pre><code>int a,b;
while(scanf(&quot;%d&quot;,&amp;a)!=EOF)//当输入数据不是文件结束符（EOF）的时候，就可以实现连续输入
{
    cout&lt;&lt;a+b;
}
return 0;</code></pre><p>  }</p>
</blockquote>
<p>C++系列：</p>
<blockquote>
<p>#include &lt; iostream &gt;<br>  using namespace std;<br>  int main()<br>  {</p>
<pre><code>int a,b;
while(cin&gt;&gt;a&gt;&gt;b)//当遇到文件结束符（EOF）或者遇到一个无效输入时才会结束输入
{
    cout&lt;&lt;a+b;
}
return 0;</code></pre><p>  }</p>
</blockquote>
<h2 id="后传"><a href="#后传" class="headerlink" title="后传"></a>后传</h2><p>讲了这么多，大家get到了没丫？看完之后就不要再次踩雷了哦~~</p>
</li>
</ul>
]]></content>
      <categories>
        <category>算法题类</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>多组输入</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM比赛总结</title>
    <url>/2019/09/27/a5-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总结一波ACM竞赛输入输出流注意事项</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="超时问题"><a href="#超时问题" class="headerlink" title="超时问题"></a>超时问题</h3><p>ACM竞赛时，若使用cin、cout超时，可换用scanf、printf语句，或者在程序开头加上std::ios::sync_with_stdio(false);语句【若程序中有using namespace std;语句，则std::可以省略】<br>使用cout时尽量不要用endl；换用”\n”能缩短程序运行时间。</p>
<pre><code class="yml"><span class="attr">std:</span><span class="string">:ios::sync_with_stdio(false);</span></code></pre>
<p>C++中，cin和cout要与stdio同步，中间会有一个缓冲，所以导致cin，cout语句输入输出缓慢，这时就可以用这个语句，取消cin，cout与stdio的同步，说白了就是提速，效率基本与scanf和printf一致。然后就可放心的使用cin，cout了。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>（1）算法竞赛中不要使用头文件conio.h，包括getch()、clrscr()等函数；<br>（2）算法竞赛中，每行输入均应以回车符结束；<br>（3）尽量使用const关键字声明常数（减少#define的使用）</p>
]]></content>
      <categories>
        <category>算法题类</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 安装与配置</title>
    <url>/2019/09/25/a7-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总结MySQL安装步骤。今天，我来盘点一下64位Windows安装MySQL8过程中遇到的坑。</p>
<a id="more"></a>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先点击下载<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL</a></p>
<p>进入网站之后，首先选择Windows系统，如下图，请选择下载第一个压缩包，然后点击No thanks, just start my download.（第一坑：书上说的下载二进制版本，请不要认为需要下载第二个压缩包，因为他只有调试和测试文件，新手安装并不需要）。<img src="https://github.com/18yang/-01/blob/%E5%AE%89%E8%A3%85mysql/MySQL.png?raw=true" alt></p>
<p>下载完之后，解压到盘文件夹，例如我的C:\web\mysql-8.0.17-winx64，开始配置环境变量，右击 </p>
<pre><code>此电脑 --- 属性 --- 高级系统设置 --- 环境变量</code></pre><p>在系统变量框中，双击path进入，选择新建，在其中加入你的文件夹的路径，如我的C:\web\mysql-8.0.17-winx64\bin    （ 。。。。。注意bin）</p>
<p>设置完毕之后，在mysql-8.0.17-winx64文件夹下创建my.ini配置文件<br>输入</p>
<pre><code>[client]
# 设置mysql客户端默认字符集
default-character-set=utf8

[mysqld]
# 设置3306端口
port = 3306
# 设置mysql的安装目录
basedir=C:\\web\\mysql-8.0.11
# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错
# datadir=C:\\web\\sqldata
# 允许最大连接数
max_connections=20
# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB</code></pre><p>接下来我们启动MySQL数据库：<br>以管理员的身份打开DOS界面<br><img src="https://github.com/18yang/-01/blob/%E5%AE%89%E8%A3%85mysql/cmd.png?raw=true" alt></p>
<p>切换数据库文件所在（bin）目录：</p>
<pre><code>cd C:\web\mysql-8.0.17-winx64\bin</code></pre><p>初始化数据库：</p>
<pre><code>mysqld --initialize --console</code></pre><p>执行完之后，会出现root用户的密码，如：</p>
<pre><code>...
 2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: APWCY5ws&amp;hjQ
...</code></pre><p>APWCY5ws&amp;hjQ 就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。（如何修改密码也是一个坑，后面介绍）</p>
<p>输入以下安装命令：</p>
<pre><code>mysqld install</code></pre><p>启动数据库请输入命令：</p>
<pre><code>net start mysql</code></pre><p>（关闭数据库命令：net stop mysql  ，mysql为数据库名字<br>如果不知道名字，点击Windows+R  输入services.msc进入服务管理器。<br>找到MySQL开头的正在运行的服务，即为你安装的数据库名称，我的就叫MySQL）</p>
<p>登录MySQL<br>输入以下格式：</p>
<pre><code>mysql -h 主机名 -u 用户名 -p</code></pre><p>如果只是登录主机MySQL<br>只需要输入</p>
<pre><code>mysql -h localhost -u root -p</code></pre><p>回车之后，会要求输入密码，输入密码即可登录，无密码直接按回车。</p>
<p>登录成功后你将会看到 Welcome to the MySQL monitor… 的提示语</p>
<p>然后命令提示符会一直以 mysq&gt; 加一个闪烁的光标等待命令的输入, 输入 exit 或 quit 退出登录。</p>
<p>登录之后想要使用数据库，则必须改变密码<br>请注意自己MySQL的版本：<br>MySQL版本5.7.6版本以前用户可以使用如下命令：</p>
<pre><code>mysql&gt; SET PASSWORD = PASSWORD(&apos;Xiaoming250&apos;); </code></pre><p>MySQL版本5.7.6版本开始的用户可以使用如下命令：</p>
<pre><code>mysql&gt; ALTER USER USER() IDENTIFIED BY &apos;Xiaoming250&apos;;</code></pre><p>至此，数据库安装完毕，后续教程持续更新中。。。</p>
<p>该文引至<a href="https://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">runoob</a></p>
<p>若有疑问或错误，欢迎进群询问</p>
]]></content>
      <categories>
        <category>MySql类</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Technology</tag>
      </tags>
  </entry>
  <entry>
    <title>比赛简介-海盟客机杯</title>
    <url>/2019/05/25/a1-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 湖南省第十二届“海盟客机杯”大学生计算机程序设计竞赛———应用开发类竞赛移动终端类<br>项目名称:余香</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这是一个手机APP项目。该APP分为五大部分，第一大部分是<strong>任务地图</strong>，用户可以查看周边任务，发布任务，接收任务，查看个人任务状态。第二大部分是<strong>聊天通讯</strong>，包括通讯录和一键呼叫。剩下的三大部分是个人任务管理，个人信息管理，个性任务推送。我觉得这个APP最有意思的地方就是摇一摇手机，然后可以进入周边的地图，在地图上，你可以查看周围的许多任务，你可以选择你想接的任务，做完之后，你就可以获得相应的赏金，特别有成就感。使用这个APP，一方面通过顺手相助或者利用自己闲散的时间帮助他人做一件小事，使得懒人变得勤快起来，另一方面，增加了邻里，同学之间和谐友爱的关系，使整个社会人与人之间变得不再冷漠。</p>
<hr>
<p>首先作为一个学弟吧，我觉得学长学姐们已经做的很棒了，认真看下来，我们真的是能从中得一定的经验体会的：</p>
<p>①104页系统设计的说明书详细的带我们走进了这部软件的“出生“和”成人“，总所周知，一个成熟软件的成型需要走过需求分析，概要设计，详细设计，开发测试四大阶段。而系统设计说明书则详细带我们进行了了解，不过能有一个面向普通人员更简单明了的说明书就好了</p>
<p>②PPT和视频的制作也很精良，不过据非正业人士反应，并不知道在干什么，还有觉得吸引力不够强，不能一下留住“试探者”的心。</p>
<p>③个人的一些想法：对老年人可以更“友善”一点，针对老年人对智能设备的掌握程度不够高这一现实，我觉得有必要对老年社区进一步简单化，可以只要一些版块，老年人只要点就可以了；在面对年轻人时也要在显示高端的同时显示便捷，应该以突出的点吸引青年朋友的目光，简单便捷的告诉他们这款软件的长处以吸引客源</p>
<p>④盈利模式不太清晰，搞不大懂，还有个人觉得应该突出这个产品的价值，而不是一味的平铺直述，尤其对于要招商广告来说，更要突出特点与价值</p>
<p>第一次接触这个，对这个软件也没有深层次的理解，相关问题学姐学长可能早就相关并解决好了而我也不知道。因此我仅是以我微末的道行提出了一些浅见，如果有说的不好的地方，欢迎批评指正。</p>
<hr>
<p>随着人们的各种需求的诞生，相对应的移动端服务软件也随之诞生，而它们只能在单一服务上为人们解决单一的问题，如外卖APP能为人们解决点餐服务，而送餐却需要增加另外的成本；快递能快速的传递物品，却要人们定点定时取得物品。面对诸如此类的问题，假使我能够顺便帮助他人完成这件小事，并将此次服务的价值储存起来，以备下次他人能够顺便为我提供一件同等价值的服务。基于此理念，我们打造了APP余香，在生活服务方面为人提供一个服务交换的平台，一方面通过顺手相助或者利用自己闲散的时间帮助他人做一件事，使得“懒人”变得勤快起来；另一方面，增加了邻里、同学之间和谐有爱的关系，使整个社会人与人之间变得不再冷漠。</p>
<p>1.1目标</p>
<p>余香APP为志在生活服务中提供一个服务交换平台人们可以用自己的闲暇时间去帮别人做某件事，这样既方便他人，也充分利用自己闲暇时间。余香APP需要提供基于地理位置信息的服务发布，服务检索功能；个性化任务推送功能，智能快捷的将最合适的任务推送给任务附近的人；通讯交流功能，任务接收者和发布者可以方便快捷沟通任务细节。</p>
<p>1.2术语</p>
<p>任务：任务可以是一件事，比如买某样东西或者去图书馆占个座。</p>
<p>香金：香金是具有价值尺度、支付手段、流通手段职能的线上虚拟货币。香金是一种法定的虚拟货币，但不等同于法定货币。它在以服务银行为媒介，由提供服务交换平台的互联网运营商发布，在人们服务交换的过程中充当一般等价物的特殊商品。</p>
<p>服务银行：服务银行是线上服务价值管理机构，具有储存、兑换服务价值的职能。在互联网时代的今天，人际间的交流越来越便捷，基于服务业的飞速发展，服务作为一种有价值的活动也需要将它兑换成能够流通的一般等价物，作为一种商品相互交换。</p>
<p>服务换服务：服务换服务是指用户之间以服务银行为媒介，通过服务银行中的虚拟货币服务币，提供或获取服务的过程。其流程为：服务需求者先对服务需求与其他条件进行描述，将其投入服务池中进行排队，当满足条件的服务提供者提出申请后，他的申请将进入服务发起人的提供者队列中，按照优先等级向服务发起者进行推送。随后双方相互洽谈服务细节、服务价值等，最终完成服务交换的过程。我们所说的服务一般是指为他<br>人做事，并使他人从中受益的活动。而在服务交换的过程中，服务提供者不一定能够当即获得报酬，而是将服务的价值通过服务币的形式储存在服务银行中，以适时等价地换取其他服务。</p>
<p>2.1任务概述</p>
<p>发布任务：用户发布一个包含地理位置信息的服务，任务将会显示在任务地图上可被人接收。</p>
<p>接收任务：用户在任务地图上看到想去完成的任务，任务被接收后才可被完成。</p>
<p>拨号：在主界面，设置拨号按钮，当用户偶遇紧急情况，可点击拨号迅速拨通预存号码</p>
<p>接收任务：用户确定要去完成某任务，先得接收任务，将任务纳入自己的未完成任务列表，已被接收的任务不能别别人接收，处于锁定状态。</p>
<p>完成任务：接收任务者完成了任务向系统提交任务完成，由任务发布人审核任务任务是否被完成，再由任务发布人确定任务是否已被完成。</p>
<p>个性任务推送：系统会自动根据当前用户的经纬度坐标从当前可接收任务中智能挑选出一条用户最可能会去做的任务给用户</p>
<p>2.2系统（或用户）的特点</p>
<p>本系统的用户为普通安卓手机用户，手机能够进行网络或者GPS定位，系统特色为结合地理位置信息的服务交换平台。</p>
<p>2.3.假定和约束<br>开发期限为一学年。</p>
<p>2.4.需求规定<br>本系统是余香网络服务交换平台。参与者包括：注册用户。他们的用例如下：</p>
<p>2.5.注册用户<br>注册用户：摇一摇、查看任务地图、发布任务、接收任务、个人信息管理、查看任务状态、通讯社交；</p>
<p>2.6.推送系统<br>推送系统：个性任务推送</p>
<p>3.详细功能介绍</p>
<p>3.1发布任务<br>用户首先通过摇一摇进入任务地图界面，地图界面右下角设有分把人物按钮，用户点击按钮即可发布人物界面，用户需要填写必要任务信息即可。</p>
<p>3.2查看任务状态<br>用户查看当前发布或者接收的任务完成情况，任务分为发布且已完成，发布未完成，接收已完成，接收未完成四个状态。</p>
<p>5.4接收任务（SRS_case4）</p>
<p>用户在任务地图点击任务发布人头像进入任务详细界面，接收任务只能接收未被接收的任务，点击已被接收的任务会被提醒下次早点来抢任务。接收任务活动图如下：</p>
<p>4运行环境规定</p>
<p>4.1设备及分布</p>
<p>服务器类型：LeanCloud云服务</p>
<p>网络类型：广域网</p>
<p>存储容量：存储容量根据需求云服务器会弹性给予，理论上讲存储不限，超出一定额度需支付额外费用即可。</p>
<hr>
<p>下面是app界面:<br><img src="/2019/05/25/a1-md/1.jpg" alt><br><img src="/2019/05/25/a1-md/2.jpg" alt><br><img src="/2019/05/25/a1-md/3.jpg" alt></p>
]]></content>
      <categories>
        <category>比赛信息类</category>
      </categories>
      <tags>
        <tag>Competition_information</tag>
      </tags>
  </entry>
  <entry>
    <title>如何配置github项目密匙</title>
    <url>/2019/05/11/a2-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于如何配置自己的github项目密匙,在此之前需要先要拥有一个自己的GitHub账号;<br>以及已经安装了git工具.</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><blockquote>
<ul>
<li>首先找到自己的./ssh文件（有些可能找不到那也也是正常的，因为.ssh文件并不是初始化系统必虚的，该目录用于保存生成过的密匙匙，随便找个地方打开git bash，执行下面操作也有效）</li>
<li>右击.ssh文件夹打开git bash窗口，在打开的git bash窗口里，输入下面信息</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">ssh-keygen</span> <span class="bullet">-t</span> <span class="string">rsa</span> <span class="bullet">-C</span> <span class="string">"youemail"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>解释一下，youemail需要换成自己的注册GitHub账号的邮箱;然后在第一个提示句输入自己的github用户名_rsa ;<em>(可以换成其他的，这个用户名以后就是你的登陆句柄 )</em></li>
<li>这个时候.ssh文件就已经建立了，在c盘的用户下面可以找到它，然后在这个文件里面打开git bash窗口（已经到打开过了可以跳过）</li>
<li>然后继续在窗口内输入（一定要检查路径是不是在.ssh下，不然会很麻烦，ps-不堪回首）然后输入下面这句</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">touch</span> <span class="string">coufig</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>然后打开coufig文件输入以下内容，注意不要在语句前加缩进和空格（ps-不堪回首）下面的one用于代替我的用户名</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># one</span></span><br><span class="line"><span class="string">Host</span> <span class="string">one.github.com</span></span><br><span class="line"><span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="string">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="string">~/.ssh/one_rsa</span></span><br><span class="line"><span class="string">User</span> <span class="string">one</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>注意不要改动 （详细参考<a href="https://www.cnblogs.com/xjnotxj/p/5845574.html?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">博客</a>)</li>
<li>前面弄完，并且已经保存后，执行下一步操作。</li>
</ul>
</blockquote>
<h3 id="添加公匙"><a href="#添加公匙" class="headerlink" title="添加公匙"></a>添加公匙</h3><blockquote>
<ul>
<li>打开自己的github账号，并且在设置里面的ssh里面添加ssh，密匙名字随便写，内容就要在.ssh文件里面找到自己建立的–比如我的是one_rsa.pub，将里面的内容复制到上面就行</li>
<li>然后就是最后一步，测试</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$ssh</span> <span class="bullet">-T</span> <span class="string">git@one.github.com</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>注意，我上面的one仅是样例，可以更改，可以与多个github绑定，设置不同的句柄，每个新账号的添加步骤一致。</li>
</ul>
</blockquote>
<p>如果不知道.ssh路径在哪的 请参考大佬<a href="https://runindark.com/2019/03/23/My%20first%20blog/" target="_blank" rel="noopener">博客</a></p>
]]></content>
      <categories>
        <category>github类</category>
      </categories>
      <tags>
        <tag>Technology</tag>
      </tags>
  </entry>
  <entry>
    <title>如何恢复静态hexo</title>
    <url>/2019/05/11/a4-md/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于如何恢复自己的静态hexo文件，做个小总结</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="如何将本地hexo备份上github"><a href="#如何将本地hexo备份上github" class="headerlink" title="如何将本地hexo备份上github"></a>如何将本地hexo备份上github</h3><ul>
<li>前提：已经配置密匙且上传过hexo站点文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">"远程仓库地址"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>先将远程仓库克隆到本地，</li>
<li>然后进入clone的目录，打开git bash</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">checkout</span> <span class="bullet">-b</span> <span class="string">hexo</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>创建并切换成hexo目录</li>
<li>然后将本地博客内的东西全部复制到该目录中</li>
<li>然后删除theme目录下的所有.git文件</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">add</span> <span class="bullet">--all</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>该命令将所有文件加入缓存区</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">"源代码"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>该命令将文件添加 自述内容</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">hexo</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>推送至远程仓库</li>
</ul>
</blockquote>
<h3 id="如何重新恢复本地博客"><a href="#如何重新恢复本地博客" class="headerlink" title="如何重新恢复本地博客"></a>如何重新恢复本地博客</h3><blockquote>
<ul>
<li>前提：已下载git和nodejs 和绑定密匙</li>
<li>先找一个文件用来准备存放需要克隆的文件</li>
<li>在该目录下打开git bash界面</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">-b</span> <span class="string">hexo</span> <span class="string">"远程仓库地址"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>然后打开该文件，输入</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo</span> <span class="bullet">--save</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>然后就完成了，接下来操作与正常hexo上传相似，<br>建议以后每次操作为（前提是如果在本地预览后没有问题，）。</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">pull</span></span><br><span class="line"><span class="string">$</span> <span class="string">hexo</span> <span class="string">d</span> <span class="bullet">-g</span></span><br><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">add</span> <span class="bullet">-all</span></span><br><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"代码自述"</span></span><br><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">-u</span> <span class="string">origin</span> <span class="string">hexo</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>github类</category>
      </categories>
      <tags>
        <tag>Technology</tag>
      </tags>
  </entry>
</search>
